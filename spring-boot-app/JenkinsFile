pipeline {
  options { timestamps(); timeout(time: 20, unit: 'MINUTES') }
  agent {
    // Use a known-good Maven+Java image; switch back later if you want
    docker {
      image 'maven:3.9-eclipse-temurin-17'
      args '-v /var/run/docker.sock:/var/run/docker.sock'
      // alwaysPull true
    }
  }

  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        git branch: 'main', url: 'https://github.com/PinkuChanda/java-cicd-pipeline-jenkins-argocd-helm-k8s.git'
        sh 'echo "Workspace:"; pwd; ls -la'
      }
    }

    stage('Agent sanity') {
      steps {
        sh '''
          echo "Java:" && java -version
          echo "Maven:" && mvn -v
          echo "Disk:" && df -h .
          test -f spring-boot-app/pom.xml || (echo "pom not found at spring-boot-app/pom.xml" && exit 1)
        '''
      }
    }

    stage('Build and Test') {
      steps {
        // Use -f instead of cd; keep logs clean (-B). Skip tests first to confirm build path.
        sh 'mvn -B -f spring-boot-app/pom.xml clean package -DskipTests'
      }
    }

    stage('Static Code Analysis') {
      environment { SONAR_URL = "http://18.196.255.105:9000" }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn -B -f spring-boot-app/pom.xml sonar:sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.token=$SONAR_AUTH_TOKEN'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "pinkuchanda/ultimate-cicd:${BUILD_NUMBER}"
      }
      steps {
        script {
          sh 'docker build -t ${DOCKER_IMAGE} spring-boot-app'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', 'docker-cred') {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "java-cicd-pipeline-jenkins-argocd-helm-k8s"
        GIT_USER_NAME = "PinkuChanda"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email "pinkuchanda654@gmail.com"
            git config user.name "Pinku Chanda"
            sed -i"" "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
            git add spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }

  post {
    always {
      // helps avoid future low-disk issues on the node
      sh 'docker system prune -af --volumes || true'
    }
  }
}
